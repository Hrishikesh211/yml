# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnectionId: '5a4c5312-e538-4725-97d6-fe77c1d4e140'
  WEBAPP_NAME: testp
  vmImageName: 'ubuntu-latest'
  RESOURCE_GROUP: test-1
  COMPOSE_FILE_PATH: 'docker-compose.yml'
  DAGS_DIR: 'dags' 
  ZIP_FILE_NAME: 'dags.zip'

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/$(DAGS_DIR)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(ZIP_FILE_NAME)'
              replaceExistingArchive: true
            displayName: 'Zip DAGS Directory'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(ZIP_FILE_NAME)'
              artifactName: 'dagsArtifact'
            displayName: 'Publish Zipped DAGS as Pipeline Artifact'

  - stage: DeployAndUnzip
    dependsOn: Build
    jobs:
      - job: DeployAndUnzip
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'dagsArtifact'
              path: '$(Pipeline.Workspace)/dagsArtifact'
            displayName: 'Download Zipped DAGS Artifact'

          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Deploying ZIP to Azure Web App via Kudu API..."

                # Define Kudu API URL for /site/wwwroot directory
                KUDU_API_BASE_URL="https://$(WEBAPP_NAME).scm.azurewebsites.net/api/vfs/site/wwwroot/"
                ZIP_DEPLOY_URL="${KUDU_API_BASE_URL}$(ZIP_FILE_NAME)"

                # Get Kudu API credentials
                PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles --resource-group $(RESOURCE_GROUP) --name $(WEBAPP_NAME) --query "[0]" --output json)
                USERNAME=$(echo $PUBLISH_PROFILE | jq -r .userName)
                PASSWORD=$(echo $PUBLISH_PROFILE | jq -r .userPWD)

                # Upload the ZIP file to the /site/wwwroot/ directory
                echo "Uploading the ZIP file to /site/wwwroot/..."
                curl -X PUT -u $USERNAME:$PASSWORD --data-binary @"$(Pipeline.Workspace)/dagsArtifact/$(ZIP_FILE_NAME)" $ZIP_DEPLOY_URL

                echo "ZIP file uploaded to /site/wwwroot/."

                # Unzip the uploaded ZIP file into the /site/wwwroot/dags directory
                echo "Unzipping the ZIP file into the /site/wwwroot/dags directory..."
                UNZIP_COMMAND_API_URL="https://$(WEBAPP_NAME).scm.azurewebsites.net/api/command"
                curl -X POST -u $USERNAME:$PASSWORD -H "Content-Type: application/json" -d '{"command": "unzip /site/wwwroot/$(ZIP_FILE_NAME) -d /site/wwwroot/$(DAGS_DIR)"}' $UNZIP_COMMAND_API_URL

                echo "Unzipping completed in the /site/wwwroot/dags directory."

                # List the contents of the /site/wwwroot/dags directory in Kudu
                echo "Listing the contents of the /site/wwwroot/dags directory..."
                curl -X POST -u $USERNAME:$PASSWORD -H "Content-Type: application/json" -d '{"command": "ls -la /site/wwwroot/$(DAGS_DIR)"}' $UNZIP_COMMAND_API_URL
                
                # Print the current working directory using pwd
                echo "Checking the current working directory..."
                curl -X POST -u $USERNAME:$PASSWORD -H "Content-Type: application/json" -d '{"command": "pwd"}' $UNZIP_COMMAND_API_URL
            displayName: 'Deploy, Unzip, Check Directory, and List Contents'


        

  # Stage 3: Deploy using Docker Compose
  - stage: Deploy
    dependsOn: DeployAndUnzip
    jobs:
      - job: Deploy
        steps:
          # Step 1: Deploy the web app using Docker Compose
          - task: AzureCLI@2
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Deploying to Azure Web App using Docker Compose..."

                # Ensure the web app exists and configure the settings
                az webapp config appsettings set --resource-group $(RESOURCE_GROUP) --name $(WEBAPP_NAME) --settings WEBSITES_ENABLE_APP_SERVICE_STORAGE=TRUE

                # Configure the web app to use Docker Compose from the specified file
                az webapp config container set --resource-group $(RESOURCE_GROUP) --name $(WEBAPP_NAME) --multicontainer-config-type compose --multicontainer-config-file $(COMPOSE_FILE_PATH)

                # Restart the web app to apply the changes
                az webapp restart --resource-group $(RESOURCE_GROUP) --name $(WEBAPP_NAME)

                echo "Docker Compose deployment completed."
            displayName: 'Deploy Docker Compose to Azure Web App'
