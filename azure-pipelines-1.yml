# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnectionId: '5a4c5312-e538-4725-97d6-fe77c1d4e140'
  WEBAPP_NAME: testp
  vmImageName: 'ubuntu-latest'
  RESOURCE_GROUP: test-1
  COMPOSE_FILE_PATH: 'docker-compose.yml'
  DAGS_DIR: 'dags' 
  ZIP_FILE_NAME: 'dags.zip'

stages:
  - stage: Build
    jobs:
      - job: Build
        steps:
          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)/$(DAGS_DIR)'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/dags.zip'
              replaceExistingArchive: true
            displayName: 'Zip DAGS Directory'
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(ZIP_FILE_NAME)'
              artifactName: 'dagsArtifact'
            displayName: 'Publish Zipped DAGS as Pipeline Artifact'

  - stage: DeployAndUnzip
    dependsOn: Build
    jobs:
      - job: DeployAndUnzip
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: 'dagsArtifact'
              path: '$(Pipeline.Workspace)/dagsArtifact'
            displayName: 'Download Zipped DAGS Artifact'
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'Development Subscription (d8501f72-cc6e-4c07-9f8c-b8523c3b63ec)'
              appType: 'webAppLinux'
              appName: '$(WEBAPP_NAME)'
              package: '$(Pipeline.Workspace)/dagsArtifact/$(ZIP_FILE_NAME)'
            displayName: 'Deploy Zipped DAGS to Azure Web App'

  # # Stage 3: Deploy using Docker Compose
  # - stage: Deploy
  #   dependsOn: DeployAndUnzip
  #   jobs:
  #     - job: Deploy
  #       steps:
  #         # Step 1: Deploy the web app using Docker Compose
  #         - task: AzureCLI@2
  #           inputs:
  #             azureSubscription: 'Development Subscription (d8501f72-cc6e-4c07-9f8c-b8523c3b63ec)'
  #             scriptType: 'bash'
  #             scriptLocation: 'inlineScript'
  #             inlineScript: |
  #               echo "Deploying to Azure Web App using Docker Compose..."
                
  #               # Ensure the web app exists and configure the settings
  #               az webapp config appsettings set --resource-group $(RESOURCE_GROUP) --name $(WEBAPP_NAME) --settings WEBSITES_ENABLE_APP_SERVICE_STORAGE=TRUE
                
  #               # Configure the web app to use Docker Compose from the specified file
  #               az webapp config container set --resource-group $(RESOURCE_GROUP) --name $(WEBAPP_NAME) --multicontainer-config-type compose --multicontainer-config-file $(COMPOSE_FILE_PATH)
                
  #               # Restart the web app to apply the changes
  #               az webapp restart --resource-group $(RESOURCE_GROUP) --name $(WEBAPP_NAME)
                
  #               echo "Docker Compose deployment completed."
  #           displayName: 'Deploy Docker Compose to Azure Web App'
