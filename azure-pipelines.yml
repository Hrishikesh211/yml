# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

variables:
  azureServiceConnectionId: '641a5b00-c982-46c8-ac54-d80edccda068'
  webAppName: 'devops-airflowpipeline-app'
  vmImageName: 'ubuntu-latest'
  environmentName: 'devops-airflowpipeline-app'
  projectRoot: $(System.DefaultWorkingDirectory)
  pythonVersion: '3.11'
  RESOURCE_GROUP: 'rmb-pilot-deploy-appservice'
  COMPOSE_FILE_PATH: 'docker-compose.yml'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive docker-compose.yml'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Publish artifact'
      artifact: drop

- stage: DeployApp
  displayName: 'Deploy Multi-Container Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - download: current
      artifact: drop
      displayName: 'Download Artifacts'

    - script: ls -la $(Pipeline.Workspace)/drop/
      displayName: 'List files in drop folder'

    - script: |
        echo "Cleaning up previous deployments"
        curl -X DELETE -u $(azureServiceConnectionId):$(servicePrincipalKey) https://$(webAppName).scm.azurewebsites.net/api/vfs/site/wwwroot/
      displayName: 'Clean up previous deployments'

    - task: AzureWebApp@1
      displayName: 'Deploy Docker Compose to Azure Web App'
      inputs:
        azureSubscription: $(azureServiceConnectionId)
        appName: $(webAppName)
        package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
        deploymentMethod: 'zipDeploy'
        takeAppOfflineFlag: true
        enableCustomDeployment: true
        verbose: true

# Stage 3: Deploy
- stage: DeployDocker
  displayName: 'Docker Deploy'
  dependsOn: DeployApp
  condition: succeeded()
  jobs:
  - job: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - download: current
      artifact: drop
      displayName: 'Download Artifacts'

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureServiceConnectionId)
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Deploying docker-compose.yml to Azure Web App using Azure CLI"
          az webapp config container set --name $(webAppName) \
            --resource-group $(environmentName) \
            --multicontainer-config-type compose \
            --multicontainer-config-file $(Pipeline.Workspace)/drop/$(Build.BuildId)/docker-compose.yml

          echo "Restarting Azure Web App to apply changes"
          az webapp restart --name $(webAppName) --resource-group $(environmentName)
      displayName: 'Deploy Docker Compose to Azure Web App'


